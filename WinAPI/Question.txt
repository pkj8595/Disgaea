1. 게임 제작에 있어서 관심분야
ㄴ AI 프로그래밍, 엔진, 쉐이더, 클라이언트, 프로그래머 

2. C/C++차이 
ㄴ 객체지향 절차지향, 클래스 

3. 굳이 C++을 사용하고 공부해야 하는지?
ㄴ 포인터를 쓸 수 있는 객체지향언어가 c++이라서....X
ㄴ C언어의 특징을 대부분 포함하고 있으며 oop의 특징을 가지고 있기 때문에?
ㄴ 기능이 많기 때문에?

4. 오버로딩 + 오버라이딩 개념 및 설명 
ㄴ 오버로딩 >> 함수의 이름은 같지만 매개변수나 리턴 타입이 다른 형의 함수를 선언하는 것 
ㄴ 오버 라이딩 >> 함수의 재정의! 자식클래스에서 기반클래스의 함수를 재정의 하는것. 기반 클래스의 함수가 virture 키워드를 가지고 있다면 업캐스팅을 하여 사용할 수 있음.
ㄴ c++에서는 맹글링 때문에 가능하지만 C에서는 맹글링이 없기때문에 오버로딩이나 오버라이딩이 불가능함.

5. stack 과 Heap의 차이 및 설명 
ㄴ 메모리 힙 >> 동적 할당할때 위치
ㄴ 스택 >> 함수나 변.........수들이 쌓인다...? 
	
5-1.메모리 힙, 자료구조 힙의 차이
ㄴ

6. 전역, 지역, 동적 변수들 변수의 lifeCycle설명
ㄴ	라이프라이클 변수의 생명주기 
	allocate -> release-> memory pool
	변수가 선언되면 메모리에 할당 >>aloocate
	스코프에서 벗어나면 release
	사용후 메모리를 해제하면 memory pool에 반환

	
ㄴ 전역 : 컴파일 타임에 할당이 되며 DATA영역에 저장된다. 프로그램이 끝날때 해제된다.
ㄴ 지역 : 스코프 {} 안에서 할당된 변수를 지역변수라고 하는데 스코프가 끝나면 해제된다. stack 영역에 들어간다. 
ㄴ 동적 변수 : heap 영역에 할당되며 사용자가 직접 해제하기 전에는 해제가 되지 않는다. C++에서는 new 키워드 C에서는 malloc으로 메모리를 할당할 수 있다.
	### new 에 의해서 생성된 객체는 delete를 만날 때에만 소멸

>>delete 와 nullptr의 차이가 ? 
	delete >> 메모리 영역을 해제 
	nullptr은 nullptr 


7. Struct /Class 
ㄴ 접근지정자 차이가 있습니다. public private

8. New / Malloc 개념 및 차이점 
ㄴ new : 메모리의 확보와 객체의 생성이 한번에 이뤄진다.
ㄴ Malloc : 매개변수로 등록된 자료형의 byte크기 만큼 메모리를 확보한다. 

@@ 9. C++ / C# 차이점 
ㄴ C++ >> C의 거의 모든 기능을 지원함
ㄴ C# >> - 가비지 컬렉터가 있음.
		 - 가상머신 위에서 돌아가기 때문에 어떤 장치라 하더라도 프로그램이 돌아갈 수 있음.
		 - 동적할당과 정적할당이 구분되어 있지 않음.
		 - 전역 함수,변수가 없음. >> 모든 멤버는 클래스에 속함
		 - 기본 자료형이 구조체의 별칭 >> 그렇기에 타입 변환을 하기 위해선 내장되어 있는 함수를 사용해야함


10. 포인터란 무엇인가? (call by value, call by refenence)
ㄴ 주소값을 저장하는 변수

11. 포인터와 참조자 차이점 
ㄴ 참조자의 경우 null값이 들어가면 오류를 발생시킨다.

12. GetMessage / PeekMessage 차이점 
ㄴ getMessage : 대기하다가 메세지가 발생하면 실행 
ㄴ peekMessage : 메세지가 발생되지 않더라도 실행

13. CallBack Function 개념 및 설명 
ㄴ 

14. C++ / C#  메모리 차이점 
ㄴ C#에서는 가비지 컬렉터가 heap영역을 주기적으로 청소한다.

15.메모리의 구조에 대한 설명 
ㄴ 메모리의 4대 영역 

Stack
	지역 변수, 
	매개 변수 저장, 
	컴파일 시점에 크기 할당하는 정적 할당을 사용 
	스코프가 끝나면 메모리에서 해제된다.

Heap 
	사용자 관리 영역,
	사용자 정의에 의해 할당된 메모리에 저장하거나 해제하는 동적 할당을 사용 

Data 
	전역 변수,
	static 변수,
	프로그램이 종료될 때까지 지워지지 않고 컴파일 시점에 크기 할당 

Code 
	소스 코드
	기계어로 제어되는 메모리 영역


16. 소멸자에 virtual를 쓰는 이유
ㄴ 상속을 받는 가상 소멸자를 쓰지 않을 경우 기반 클래스의 소멸자가 호출되지 않는다.

	타일 속성	box콜라이더		픽셀		픽셀
17. 스타듀 밸리, 할로우 나이트, 마리오, 메가맨을 해봤는지?
해봤다면 이와 비슷한 장르의 게임 충돌처리는 어떻게 할지 본인의 생각을 애기하시오.
ㄴ3가지의 장단점
ㄴ타일속성		: 타일은 
ㄴbox 콜라이더	: 계산이 빠르지만 정확한 충돌처리가 어렵다. 
ㄴ픽셀			: 섬세한 충돌처리가 가능, 충돌 체크하는 객체가 많다면 연산량이 많아짐 충돌되는 범위가 넓을때 사용
잘못사용하면 메모리 소모가 엄청남.



18.코딩테스트 : 문자열 관련 
<주의사항>
C++언어로 풀어야하고 아래의 ㅎ마수의 내용을 알맞게 채워넣으세요 
라이브러리을 사용하면 안됩니다.

입력값 : "hello world this is Pearl Abyss"
반환값 : "Pearl Abyss is this world hello "
<조건>
입력 문자열은 앞뒤에 공백이 없다고 가정합니다.
모든 단어는 공백 한칸으로 구분된다고 가정합니다.
void reverseWords(char* output, int outputArraySize, const char* input)
{
	output

}

19. 당신을 왜 뽑아야 하나? 성격적으로(함정)or 가지고 있는 기술로 어필을 해봐라
ㄴ 기술 
ㄴ 네이티브 C, C++, 유니티, 포토샵, API, 포인터, 객체지향, 

20. 본인이 추구하거나 선호하는 방식의 게임이 있는지?
EX) 나는 어떤 게임을 만들고 싶다.(반드시) 
ㄴ 3D 탄막게임 
ㄴ 전략 땅따먹기 게임 

21 순수 가상 함수를 만들면 메모리상에 몇 바이트 차지하는가?
ㄴ 32bit 운영체제 unsigned int 4byte
ㄴ 64bit 운영체제 unsigned longlong 8byte
ㄴ 가상 함수 테이블을 가리키는 포인터를 가진다. 
ㄴ 즉, 멤버 변수가 하나도 없는 경우 함수가 여러개더라도 순수 가상 테이블의 첫번째 값을 가리키면 충분하기 때문에 포인터의 크기인 4byte를 가진다.

문자열 : strxxx_s : 버퍼 오버플로우 문제로 분사할 크기를 명확하게 잡을 수 있게 추가된 함수
폰노이만 아키텍처 (병목현상이 일어....나)
h 인쿨루드  >> 전처리 단계 
cpp인클루드 >> 컴파일 단계


22. 헤더와 cpp -> #include 차이점 
ㄴ 

23. STL 정의에 대해 설명해보시오.
ㄴ 스탠다드 라이브러리 

24. Vector / List 차이점 
ㄴ 순차 검색, 랜덤 검색이 가능하고 중간 삽입 삭제가 약하다 

25. 벡터와 배열의 차이점
ㄴ vector	: 가변 배열, 포인터로 순차접근, 
ㄴ array		: 

26. 벡터 재할당 속도 줄이는 법에 대해 알고 있는대로 말해봐라(선행질문)
ㄴ 6가지 
벡터 맵-> 내부 자료구조를 물어보기 위한

27. 특정 회사를 지원했는데 그 회사는 특정 엔진or 프레임워크만 사용한다.
ㄴ 유티니 STL X
ㄴ 언리얼 STL X -> USTL(언리얼에 맞게끔 커스텀 한것)

28. 컴파일 순서에 대해 설명하시오.()
ㄴ전처리 단계 컴파일 단계 링커 
	ㄴ CLR / 컴파일러의 차이 
		ㄴ 인터프리터 / 컴파일러 
ㄴ어셈블러
	어셈블리어로 작성된 소스를 기계어로 번역하는 번역기
ㄴ프리프로세서(preprocessor, 전처리기)
	C의 #include에 같은것에 해당함
	원시언어와 목적언어가 모두 고급언어
ㄴC 프리프로세서
	파일 포함 기능(#include)
	매크로 처리 기능
	조건부 컴파일 기능
	OS에 따라 조건을 다르게 하여 컴파일 할 때 사용
ㄴ인터프리터
	번역과 동시에 실행
	Python과 같은 대화형 언어로 구현할 때 사용
	번역과 실행을 같이 수행하기 때문에 특히 반복문일 때 실행시간이 많이 늘어남
ㄴ크로스 컴파일러
	소스를 내 PC의 기계어가 아닌 다른 컴퓨터의 기계어로 번역
	컴퓨터에서 컴파일 해서 임베디드 시스템으로 다운로드해서 실행
ㄴ바이트코드 컴파일러
	소스를 바이트 코드라 불리는 중간코드로 컴파일 한뒤 바이트 코드는 JVM에서 인터프리트 되어 실행
	혼합형 컴파일러(컴파일러 + 인터프리터)
http://www.kwangsiklee.com/2018/06/%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-%EA%B0%95%EC%9D%98-1-%EA%B0%9C%EC%9A%94/


29. 제일 자신있는 분야에 대해 말해보시오.
ㄴ 클라이언트에 구현되는 로직에 관한 구현에 자신있습니다.?

30. 유니코드와 아스키 코드 차이점 
-아스키 코드
ㄴ128개의 문자조합을 제공하는 7비트 부호 
아스키코드만으로는 각 나라별 언어를 표현할 수 없다.
- 유니코드 
ㄴ 각 나라별 언어를 모두 표현하기 위해 나온 코드 체계
숫자와 글자, 키 값이 1:1로 매핑된 형태의 코드
16비트를 표현하므로 최대 645536자 표현가능 

utf-8은 유니코드가 파일에 저장될 때 영문/ 숫자는 아스키 코드와 똑같이 1바이트사용 한글은 3바이트로 파일에 저장

#define, const, constexpr 
c와 c++ 컴파일러의 특성

//================================================================
C/ C++ 
전처리로 작동 
c와 c++은 전처리에서 오류가 있어도 체크만 하고 링커로 보낸다.
링커 -> .obj ->run -> 컴파일러 

constexpr >> 상수지만 컴파일타임에 오류가 발견되면 컴파일을 멈춘다.
const >> 런타임 전까지 물고있다가 오류가 발견되면 멈춘다.
#define >> 전처리 단계에서 메모리가 올라가지 않는다. 

언제 확인해서 넘겨줘야하나를 판단해야한다.

const , constexpr
ㄴC++11 추가되었다. 13은 버린다. (C++ 17)대격변
ㄴ 해당 객체나 함수의 리턴값을 "컴파일"타임에 알 수 있다.(값)
ㄴ C++ 17부터는 람다식에도 적용이 된다.

**컴파일 타임에 값이 결정되므로 함수 호출간 템플릿 인자로 넘겨줄때 유용하다.
const 와 constexpr의 차이점은 초기화 여부와 오류 발견시기
ㄴ  const변수는 초기화를 런타임까지 지연시킬 수 있지만 
	constexpr변수는 반드시 컴파일 타임에 초기화가 되어 있어야한다.

	const>>메모리 접근해서 바꿀수있다.
	constexpr >> 진짜 상수다 메모리에서 조차 바꿀 수 없다.(템플릿과 궁합이 좋다.)
//================================================================
인라인 단점 
- 자료형이 동적이지 못한다. 
- 자료형에 독립적이지 못하다.
- 용량이 늘어난다.
 템플릿을 쓰면 
